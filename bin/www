#!/usr/bin/env node

const http = require("http");
const path = require("path");
let app = require("../app");

const port = process.env.PORT || 5000;

// catch 404 and render a not-found.hbs template
app.use("/api", (req, res, next) => {
  res.status(404);
  res.json("not-found");
});

app.use((req, res, next) => {
  res.sendFile(path.resolve(__dirname, "..", "public", "index.html"));
});

app.use((err, req, res, next) => {
  if (err.response) {
    console.error("API Error", req.method, req.path, err.response.data);
  } else {
    console.error("ERROR", req.method, req.path, err);
  }
  // always log the error

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
    res.json({ message: "error" });
  }
});

let server = http.createServer(app);

server.on("error", (error) => {
  if (error.syscall !== "listen") {
    throw error;
  }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(`Port ${process.env.PORT} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(port, () => {
  console.log(`Listening on http://localhost:${port}`);
});
